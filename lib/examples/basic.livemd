<!-- livebook:{"persist_outputs":true} -->

# Building a resilient application with Journey

```elixir
# [Optional] Setting Build Key, see https://gojourney.dev/your_keys
# (Using "Journey Livebook Demo" build key)
System.put_env("JOURNEY_BUILD_KEY", "B27AXHMERm2Z6ehZhL49v")

Mix.install(
  [
    {:ecto_sql, "~> 3.10"},
    {:postgrex, "~> 0.21"},
    {:jason, "~> 1.4"},
    {:journey, "~> 0.10"},
    # {:journey, path: Path.join([__DIR__, "../.."])},
    {:kino_vega_lite, "~> 0.1.11"},
    {:kino, "~> 0.16.1"}
  ],
  start_applications: false
)

Application.put_env(:journey, :log_level, :warning)

# Update this configuration to point to your database server
# (to create the database, run `mix ecto.create` from the root of the repo).
Application.put_env(:journey, Journey.Repo,
  database: "journey_dev",
  username: "postgres",
  password: "postgres",
  hostname: "localhost",
  log: false,
  port: 5432
)

Application.put_env(:journey, :ecto_repos, [Journey.Repo])

Application.loaded_applications()
|> Enum.map(fn {app, _, _} -> app end)
|> Enum.each(&Application.ensure_all_started/1)
```

## Getting things done with Journey

This livebook shows using Journey for a ridiculously basic flow: computing the sum of two numbers, and determining whether the sum exceeds a threshold. It has two input values (`x` and `y`) and two computations (`sum` and `large_value_alert`).

This livebook shows creating a blueprint (graph) for computing the sum and large_value_alert, and then executing an instance of the blueprint to perform computations for a particular set of inputs.

A few things to note:

* every input value (`:x`, `:y`), or computation result (`:sum`, `:large_value_alert`) is persisted,
* the two computations
  * happen reliably (their functions are executed with a retry policy),
  * are as horizontally distributed as your app is (the functions will run wherever your app runs),
  * are proactive (`:sum` will be computed when `:x` and `:y` become available, and `:large_value_alert` will be computed when `:sum` is available).
* executions of this flow can be as long-running as needed (milliseconds? months?), and will live through system restarts, crashes, redeployments, page reloads, etc.

These attributes – reliability, scalability, and persistence – come without the need to subscribe to an online service, or ship your application's data to a third party, or to deploy any additional infrastructure. Just your application, using a package, storing data in your database, and running as it normally would.

## Define the Blueprint of the Application

Our application is very simple, given two numbers, it computes the sum, and sets an alert if the sum is "too large".

## "Business logic": `f_add(x, y)`

```elixir
# The function for adding two numbers. Part of the "business logic" of this application.
f_add = fn %{x: x, y: y} -> {:ok, x + y} end
```

<!-- livebook:{"output":true} -->

```
#Function<42.81571850/1 in :erl_eval.expr/6>
```

## The flow

A journey graph is the blueprint for this application. It defines its inputs and computed values exist, their dependencies, and attaches functions to self-computing values.

```elixir
import Journey.Node
import Journey.Node.Conditions
import Journey.Node.UpstreamDependencies

graph = Journey.new_graph(
  # graph name.
  "g1",
  # graph version.
  "v1",
  # graph nodes.
  [
    input(:x),
    input(:y),
    # the `:sum` computation is waiting on :x and :y.   
    compute(:sum, [:x, :y], f_add),
    compute(
      :large_value_alert, 
      unblocked_when(
        :sum, 
        fn sum_node -> sum_node.set_time != nil and sum_node.node_value > 40 end
      ),
      fn _ -> {:ok, "🚨"} end
    ),
  ]
)
```

<!-- livebook:{"output":true} -->

```
%Journey.Graph{
  name: "g1",
  version: "v1",
  nodes: [
    %Journey.Graph.Input{name: :execution_id, type: :input},
    %Journey.Graph.Input{name: :last_updated_at, type: :input},
    %Journey.Graph.Input{name: :x, type: :input},
    %Journey.Graph.Input{name: :y, type: :input},
    %Journey.Graph.Step{
      name: :sum,
      gated_by: {:and,
       [x: &Journey.Node.Conditions.provided?/1, y: &Journey.Node.Conditions.provided?/1]},
      f_compute: #Function<42.81571850/1 in :erl_eval.expr/6>,
      f_on_save: nil,
      type: :compute,
      mutates: nil,
      max_retries: 3,
      abandon_after_seconds: 60
    },
    %Journey.Graph.Step{
      name: :large_value_alert,
      gated_by: {:sum, #Function<42.81571850/1 in :erl_eval.expr/6>},
      f_compute: #Function<42.81571850/1 in :erl_eval.expr/6>,
      f_on_save: nil,
      type: :compute,
      mutates: nil,
      max_retries: 3,
      abandon_after_seconds: 60
    }
  ],
  f_on_save: nil,
  hash: "43B3E97A0AEDE1B1FC3E78057CBAA7F0E534F829271F4B8C43F666F54BAD409E"
}
```

## Flow, visualized

Here is the visual – Mermaid – representation of the graph that we have just defined.

You can see the two input values (`:x`, `:y`), the two computations (`:sum`,`:large_value_alert`), and their dependencies.

It also shows two system values, `:execution_id` and `:last_updated_at`, which are maintained by the runtime.

```elixir
graph
|> Journey.Tools.generate_mermaid_graph()
|> Kino.Mermaid.new()
```

<!-- livebook:{"output":true} -->

```mermaid
graph TD
    %% Graph
    subgraph Graph["🧩 'g1', version v1"]
        execution_id[execution_id]
        last_updated_at[last_updated_at]
        x[x]
        y[y]
        sum["sum<br/>(anonymous fn)"]
        large_value_alert["large_value_alert<br/>(anonymous fn)"]

        x -->  sum
        y -->  sum
        sum -->  large_value_alert
    end

    %% Styling
    classDef inputNode fill:#e1f5fe,stroke:#01579b,stroke-width:2px,color:#000000
    classDef computeNode fill:#f3e5f5,stroke:#4a148c,stroke-width:2px,color:#000000
    classDef scheduleNode fill:#fff3e0,stroke:#e65100,stroke-width:2px,color:#000000
    classDef mutateNode fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,color:#000000

    %% Apply styles to actual nodes
    class y,x,last_updated_at,execution_id inputNode
    class large_value_alert,sum computeNode
```

## Executing instances of the blueprint

Now that we have the blueprint of the application, we can run its executions.

## Starting a new execution

Here is an example of starting a new execution of the graph. If the application handles a user's visit to your website, this might happen when the user lands on the web page, and, perhaps, starts engaging with it.

We'll take a note of the id of the execution, just in case everything crashes (or if the user reloads the page, or leaves and comes back in a month) and we need to reload it later.

```elixir
execution = Journey.start_execution(graph)

# Take a note of the id of the execution, so we can reload it in case the data center reboots.
execution_id = execution.id
```

<!-- livebook:{"output":true} -->

```
"EXECMZXEB8YMT8T6HXAEAGB0"
```

The new execution doesn't have much in it at this point, nothing has been set or computed, except for the two system fields.

```elixir
# No values are set, except for system-provided values.
Journey.values_all(execution)
```

<!-- livebook:{"output":true} -->

```
%{
  sum: :not_set,
  y: :not_set,
  x: :not_set,
  execution_id: {:set, "EXECMZXEB8YMT8T6HXAEAGB0"},
  last_updated_at: {:set, 1758040638},
  large_value_alert: :not_set
}
```

## Once `:x` and `:y` are provided, `:sum` gets computed

The user might start supplying the data:

```elixir
execution = Journey.set(execution, :x, 12); :ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

Btw, if the world crashed (or got redeployed, or if the user leaves), no worries.

Since we took a note of the ID of the execution, we can load the execution as soon as things are back up (or when the user comes back), and proceed as if nothing happened.

```elixir
reloaded_execution = Journey.load(execution_id)
```

<!-- livebook:{"output":true} -->

```
%Journey.Persistence.Schema.Execution{
  __meta__: #Ecto.Schema.Metadata<:loaded, "executions">,
  id: "EXECMZXEB8YMT8T6HXAEAGB0",
  graph_name: "g1",
  graph_version: "v1",
  graph_hash: "43B3E97A0AEDE1B1FC3E78057CBAA7F0E534F829271F4B8C43F666F54BAD409E",
  archived_at: nil,
  values: [
    %Journey.Persistence.Schema.Execution.Value{
      __meta__: #Ecto.Schema.Metadata<:loaded, "values">,
      id: "VALT31RE2GT71690TAX8ELH",
      execution_id: "EXECMZXEB8YMT8T6HXAEAGB0",
      execution: #Ecto.Association.NotLoaded<association :execution is not loaded>,
      node_name: :last_updated_at,
      node_type: :input,
      node_value: 1758040638,
      set_time: 1758040638,
      ex_revision: 1,
      inserted_at: 1758040638,
      updated_at: 1758040638
    },
    %Journey.Persistence.Schema.Execution.Value{
      __meta__: #Ecto.Schema.Metadata<:loaded, "values">,
      id: "VALYV7YM1ZZG0BAL32BM3ZA",
      execution_id: "EXECMZXEB8YMT8T6HXAEAGB0",
      execution: #Ecto.Association.NotLoaded<association :execution is not loaded>,
      node_name: :x,
      node_type: :input,
      node_value: 12,
      set_time: 1758040638,
      ex_revision: 1,
      inserted_at: 1758040638,
      updated_at: 1758040638
    },
    %Journey.Persistence.Schema.Execution.Value{
      __meta__: #Ecto.Schema.Metadata<:loaded, "values">,
      id: "VAL5H7RTG8YLG94H1H2H31M",
      execution_id: "EXECMZXEB8YMT8T6HXAEAGB0",
      execution: #Ecto.Association.NotLoaded<association :execution is not loaded>,
      node_name: :execution_id,
      node_type: :input,
      node_value: "EXECMZXEB8YMT8T6HXAEAGB0",
      set_time: 1758040638,
      ex_revision: 0,
      inserted_at: 1758040638,
      updated_at: 1758040638
    },
    %Journey.Persistence.Schema.Execution.Value{
      __meta__: #Ecto.Schema.Metadata<:loaded, "values">,
      id: "VAL2V7M8DE429Z79DGRBLLB",
      execution_id: "EXECMZXEB8YMT8T6HXAEAGB0",
      execution: #Ecto.Association.NotLoaded<association :execution is not loaded>,
      node_name: :y,
      node_type: :input,
      node_value: nil,
      set_time: nil,
      ex_revision: 0,
      inserted_at: 1758040638,
      updated_at: 1758040638
    },
    %Journey.Persistence.Schema.Execution.Value{
      __meta__: #Ecto.Schema.Metadata<:loaded, "values">,
      id: "VALJBM13ZEJ679VMMTMYH32",
      execution_id: "EXECMZXEB8YMT8T6HXAEAGB0",
      execution: #Ecto.Association.NotLoaded<association :execution is not loaded>,
      node_name: :sum,
      node_type: :compute,
      node_value: nil,
      set_time: nil,
      ex_revision: 0,
      inserted_at: 1758040638,
      updated_at: 1758040638
    },
    %Journey.Persistence.Schema.Execution.Value{
      __meta__: #Ecto.Schema.Metadata<:loaded, "values">,
      id: "VALRET23726GV9X5B425A4D",
      execution_id: "EXECMZXEB8YMT8T6HXAEAGB0",
      execution: #Ecto.Association.NotLoaded<association :execution is not loaded>,
      node_name: :large_value_alert,
      node_type: :compute,
      node_value: nil,
      set_time: nil,
      ex_revision: 0,
      inserted_at: 1758040638,
      updated_at: 1758040638
    }
  ],
  computations: [
    %Journey.Persistence.Schema.Execution.Computation{
      __meta__: #Ecto.Schema.Metadata<:loaded, "computations">,
      id: "CMP18T6XYBZMMXDVYAGH1AX",
      execution_id: "EXECMZXEB8YMT8T6HXAEAGB0",
      execution: #Ecto.Association.NotLoaded<association :execution is not loaded>,
      node_name: :sum,
      computation_type: :compute,
      state: :not_set,
      ex_revision_at_start: nil,
      ex_revision_at_completion: nil,
      scheduled_time: nil,
      start_time: nil,
      completion_time: nil,
      deadline: nil,
      error_details: nil,
      computed_with: nil,
      inserted_at: 1758040638,
      updated_at: 1758040638
    },
    %Journey.Persistence.Schema.Execution.Computation{
      __meta__: #Ecto.Schema.Metadata<:loaded, "computations">,
      id: "CMPHJTYYH2G2ZVYH7MAZL39",
      execution_id: "EXECMZXEB8YMT8T6HXAEAGB0",
      execution: #Ecto.Association.NotLoaded<association :execution is not loaded>,
      node_name: :large_value_alert,
      computation_type: :compute,
      state: :not_set,
      ex_revision_at_start: nil,
      ex_revision_at_completion: nil,
      scheduled_time: nil,
      start_time: nil,
      completion_time: nil,
      deadline: nil,
      error_details: nil,
      computed_with: nil,
      inserted_at: 1758040638,
      updated_at: 1758040638
    }
  ],
  revision: 1,
  inserted_at: 1758040638,
  updated_at: 1758040638
}
```

The user is supplying the other input:

```elixir
reloaded_execution = Journey.set(reloaded_execution, :y, 2); :ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

Now that both `:x` and `:y` have been supplied, `:sum` gets computed. Here is the state attached to the execution:

(Note: since `:sum` is "small",  `:large_value_alert` does not get set (thanks to the condition we defined in the graph for this node.)

```elixir
Journey.get_value(reloaded_execution, :sum, wait: :any)
```

<!-- livebook:{"output":true} -->

```
{:ok, 14}
```

```elixir
Journey.values_all(reloaded_execution)
```

<!-- livebook:{"output":true} -->

```
%{
  sum: {:set, 14},
  y: {:set, 2},
  x: {:set, 12},
  execution_id: {:set, "EXECMZXEB8YMT8T6HXAEAGB0"},
  last_updated_at: {:set, 1758040638},
  large_value_alert: :not_set
}
```

```elixir
Journey.get_value(reloaded_execution, :large_value_alert)
```

<!-- livebook:{"output":true} -->

```
{:error, :not_set}
```

## Bigger `:x` -> bigger `:sum` -> `:large_value_alert` 🚨!!

If an input value changes, the downstream nodes get re-evaluated.

```elixir
reloaded_execution = Journey.set(reloaded_execution, :x, 133); :ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

"no worries, here is the updated sum"

```elixir
Journey.get_value(reloaded_execution, :sum, wait: :newer)
```

<!-- livebook:{"output":true} -->

```
{:ok, 135}
```

The updated `:x` pushes `:sum` over the threshold that triggers `:large_value_alert`:

```elixir
Journey.get_value(reloaded_execution, :large_value_alert)
```

<!-- livebook:{"output":true} -->

```
{:ok, "🚨"}
```

```elixir
reloaded_execution = Journey.set(reloaded_execution, :x, 1); :ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
Journey.get_value(reloaded_execution, :sum, wait: :newer)
```

<!-- livebook:{"output":true} -->

```
{:ok, 3}
```

```elixir
Journey.get_value(reloaded_execution, :large_value_alert)
```

<!-- livebook:{"output":true} -->

```
{:error, :not_set}
```

This basic computation happened with persistence, resiliency, and scalability.

## Searching through executions

You can search the database for execution records, querying by specific values, with sorting, limits and pagination:

```elixir
Journey.list_executions(
  graph_name: graph.name,
  graph_version: graph.version,
  order_by_execution_fields: [:inserted_at],
  filter_by: [{:sum, :gt, 2}, {:x, :lt, 10}],
  offset: 0,
  limit: 10
)
|> Enum.map(fn e ->
  Journey.values(e)
end)
```

<!-- livebook:{"output":true} -->

```
[
  %{sum: 3, y: 2, x: 1, execution_id: "EXECB5468BED3JEB9AA5MJ0T", last_updated_at: 1758040010},
  %{sum: 3, y: 2, x: 1, execution_id: "EXECL65MMAM486TZMX0YY4AA", last_updated_at: 1758040083},
  %{sum: 3, y: 2, x: 1, execution_id: "EXECMZXEB8YMT8T6HXAEAGB0", last_updated_at: 1758040639}
]
```

## System Status: health, stats

You can find the stats of the system: the executions what graphs are running, how many are there, and what is happening, generally.

This is a general "high level stats and health check".

<!-- livebook:{"break_markdown":true} -->

System stats, as a human friendly text:

```elixir
Journey.Insights.Status.status() |> Journey.Insights.Status.to_text() |> IO.puts()
```

<!-- livebook:{"output":true} -->

```
System Status: HEALTHY
Database: Connected
================================================================================

GRAPHS (14 total):
----------
Name: 'Credit Card Application flow graph'
Version: 'v1.0.0'
Executions:
- active: 533
- archived: 1.1k
First activity: 2025-09-15T21:13:05Z
Last activity: 2025-09-16T15:44:28Z
Computations:
✓ success: 4.0k
◯ not_set: 15.1k
⚠ abandoned: 53

---------

Name: 'somegraph'
Version: 'v1'
Executions:
- active: 9
- archived: 0
First activity: 2025-09-16T16:05:41Z
Last activity: 2025-09-16T16:05:41Z
Computations:
✓ success: 21
✗ failed: 6
◯ not_set: 4

---------

Name: 'demo graph'
Version: 'v1'
Executions:
- active: 3
- archived: 0
First activity: 2025-09-04T05:09:58Z
Last activity: 2025-09-04T05:10:11Z
Computations:
✓ success: 3
◯ not_set: 3

---------

Name: 'g1'
Version: 'v1'
Executions:
- active: 3
- archived: 0
First activity: 2025-09-16T16:37:18Z
Last activity: 2025-09-16T16:37:19Z
Computations:
✓ success: 13
◯ not_set: 4

---------

Name: 'string_comp_test'
Version: '1.0.0'
Executions:
- active: 3
- archived: 0
First activity: 2025-08-27T18:45:34Z
Last activity: 2025-08-27T18:45:34Z

---------

Name: 'string_fix_test'
Version: '1.0.0'
Executions:
- active: 3
- archived: 0
First activity: 2025-08-27T18:47:33Z
Last activity: 2025-08-27T18:47:33Z

---------

Name: 'test_clean'
Version: '1.0.0'
Executions:
- active: 3
- archived: 0
First activity: 2025-08-27T18:32:03Z
Last activity: 2025-08-27T18:32:03Z

---------

Name: 'g12345'
Version: 'v293'
Executions:
- active: 2
- archived: 0
First activity: 2025-08-29T05:00:36Z
Last activity: 2025-08-29T05:00:36Z

---------

Name: 'demo'
Version: 'v1.0.0'
Executions:
- active: 1
- archived: 0
First activity: 2025-09-15T21:13:41Z
Last activity: 2025-09-15T21:13:41Z
Computations:
✓ success: 1

---------

Name: 'injection_test'
Version: '1.0.0'
Executions:
- active: 1
- archived: 0
First activity: 2025-08-27T18:49:53Z
Last activity: 2025-08-27T18:49:53Z

---------

Name: 'string_test'
Version: '1.0.0'
Executions:
- active: 1
- archived: 0
First activity: 2025-08-27T18:45:17Z
Last activity: 2025-08-27T18:45:17Z

---------

Name: 'test'
Version: '1.0.0'
Executions:
- active: 1
- archived: 0
First activity: 2025-08-27T18:51:34Z
Last activity: 2025-08-27T18:51:34Z

---------

Name: 'test'
Version: 'v1.0.0'
Executions:
- active: 1
- archived: 0
First activity: 2025-09-15T23:22:16Z
Last activity: 2025-09-15T23:22:16Z
Computations:
✓ success: 2
⏳ computing: 1

---------

Name: 'testhskjdhfd'
Version: 'v1'
Executions:
- active: 1
- archived: 0
First activity: 2025-09-16T04:25:01Z
Last activity: 2025-09-16T04:26:22Z
Computations:
✓ success: 3
◯ not_set: 3

```

<!-- livebook:{"output":true} -->

```
:ok
```

System stats, as a code-friendly data structure:

```elixir
Journey.Insights.Status.status()
```

<!-- livebook:{"output":true} -->

```
%{
  status: :healthy,
  graphs: [
    %{
      stats: %{
        computations: %{by_state: %{}, most_recently_created: nil, most_recently_updated: nil},
        executions: %{
          active: 1,
          archived: 0,
          most_recently_created: "2025-08-27T18:49:53Z",
          most_recently_updated: "2025-08-27T18:49:53Z"
        }
      },
      graph_name: "injection_test",
      graph_version: "1.0.0"
    },
    %{
      stats: %{
        computations: %{by_state: %{}, most_recently_created: nil, most_recently_updated: nil},
        executions: %{
          active: 1,
          archived: 0,
          most_recently_created: "2025-08-27T18:45:17Z",
          most_recently_updated: "2025-08-27T18:45:17Z"
        }
      },
      graph_name: "string_test",
      graph_version: "1.0.0"
    },
    %{
      stats: %{
        computations: %{
          by_state: %{
            abandoned: 53,
            cancelled: 0,
            success: 4039,
            failed: 0,
            not_set: 15065,
            computing: 0
          },
          most_recently_created: "2025-09-15T21:13:05Z",
          most_recently_updated: "2025-09-16T15:44:28Z"
        },
        executions: %{
          active: 533,
          archived: 1059,
          most_recently_created: "2025-09-15T21:13:05Z",
          most_recently_updated: "2025-09-16T15:44:28Z"
        }
      },
      graph_name: "Credit Card Application flow graph",
      graph_version: "v1.0.0"
    },
    %{
      stats: %{
        computations: %{
          by_state: %{abandoned: 0, cancelled: 0, success: 21, failed: 6, not_set: 4, computing: 0},
          most_recently_created: "2025-09-16T16:05:41Z",
          most_recently_updated: "2025-09-16T16:05:41Z"
        },
        executions: %{
          active: 9,
          archived: 0,
          most_recently_created: "2025-09-16T16:05:41Z",
          most_recently_updated: "2025-09-16T16:05:41Z"
        }
      },
      graph_name: "somegraph",
      graph_version: "v1"
    },
    %{
      stats: %{
        computations: %{by_state: %{}, most_recently_created: nil, most_recently_updated: nil},
        executions: %{
          active: 3,
          archived: 0,
          most_recently_created: "2025-08-27T18:47:33Z",
          most_recently_updated: "2025-08-27T18:47:33Z"
        }
      },
      graph_name: "string_fix_test",
      graph_version: "1.0.0"
    },
    %{
      stats: %{
        computations: %{by_state: %{}, most_recently_created: nil, most_recently_updated: nil},
        executions: %{
          active: 1,
          archived: 0,
          most_recently_created: "2025-08-27T18:51:34Z",
          most_recently_updated: "2025-08-27T18:51:34Z"
        }
      },
      graph_name: "test",
      graph_version: "1.0.0"
    },
    %{
      stats: %{
        computations: %{by_state: %{}, most_recently_created: nil, most_recently_updated: nil},
        executions: %{
          active: 3,
          archived: 0,
          most_recently_created: "2025-08-27T18:45:34Z",
          most_recently_updated: "2025-08-27T18:45:34Z"
        }
      },
      graph_name: "string_comp_test",
      graph_version: "1.0.0"
    },
    %{
      stats: %{
        computations: %{
          by_state: %{abandoned: 0, cancelled: 0, success: 2, failed: 0, not_set: 0, computing: 1},
          most_recently_created: "2025-09-15T23:22:16Z",
          most_recently_updated: "2025-09-15T23:22:16Z"
        },
        executions: %{
          active: 1,
          archived: 0,
          most_recently_created: "2025-09-15T23:22:16Z",
          most_recently_updated: "2025-09-15T23:22:16Z"
        }
      },
      graph_name: "test",
      graph_version: "v1.0.0"
    },
    %{
      stats: %{
        computations: %{by_state: %{}, most_recently_created: nil, most_recently_updated: nil},
        executions: %{
          active: 2,
          archived: 0,
          most_recently_created: "2025-08-29T05:00:36Z",
          most_recently_updated: "2025-08-29T05:00:36Z"
        }
      },
      graph_name: "g12345",
      graph_version: "v293"
    },
    %{
      stats: %{
        computations: %{
          by_state: %{abandoned: 0, cancelled: 0, success: 13, failed: 0, not_set: 4, computing: 0},
          most_recently_created: "2025-09-16T16:37:19Z",
          most_recently_updated: "2025-09-16T16:37:19Z"
        },
        executions: %{
          active: 3,
          archived: 0,
          most_recently_created: "2025-09-16T16:37:18Z",
          most_recently_updated: "2025-09-16T16:37:19Z"
        }
      },
      graph_name: "g1",
      graph_version: "v1"
    },
    %{
      stats: %{
        computations: %{
          by_state: %{abandoned: 0, cancelled: 0, success: 3, failed: 0, not_set: 3, computing: 0},
          most_recently_created: "2025-09-04T05:09:58Z",
          most_recently_updated: "2025-09-04T05:10:11Z"
        },
        executions: %{
          active: 3,
          archived: 0,
          most_recently_created: "2025-09-04T05:09:58Z",
          most_recently_updated: "2025-09-04T05:10:11Z"
        }
      },
      graph_name: "demo graph",
      graph_version: "v1"
    },
    %{
      stats: %{
        computations: %{by_state: %{}, most_recently_created: nil, most_recently_updated: nil},
        executions: %{
          active: 3,
          archived: 0,
          most_recently_created: "2025-08-27T18:32:03Z",
          most_recently_updated: "2025-08-27T18:32:03Z"
        }
      },
      graph_name: "test_clean",
      graph_version: "1.0.0"
    },
    %{
      stats: %{
        computations: %{
          by_state: %{abandoned: 0, cancelled: 0, success: 3, failed: 0, not_set: 3, computing: 0},
          most_recently_created: "2025-09-16T04:26:22Z",
          most_recently_updated: "2025-09-16T04:26:22Z"
        },
        executions: %{
          active: 1,
          archived: 0,
          most_recently_created: "2025-09-16T04:25:01Z",
          most_recently_updated: "2025-09-16T04:26:22Z"
        }
      },
      graph_name: "testhskjdhfd",
      graph_version: "v1"
    },
    %{
      stats: %{
        computations: %{
          by_state: %{abandoned: 0, cancelled: 0, success: 1, failed: 0, not_set: 0, computing: 0},
          most_recently_created: "2025-09-15T21:13:41Z",
          most_recently_updated: "2025-09-15T21:13:41Z"
        },
        executions: %{
          active: 1,
          archived: 0,
          most_recently_created: "2025-09-15T21:13:41Z",
          most_recently_updated: "2025-09-15T21:13:41Z"
        }
      },
      graph_name: "demo",
      graph_version: "v1.0.0"
    }
  ],
  database_connected: true
}
```

## Flow Analytics: see user's progression

Since every data-setting operation touches the execution, Journey can provide stats on what is happening in the system. What percentage of users reached `:x`, what percentage of users reached `:y`, etc.

In a way, this is not unlike funnel analytics for the application defined by the graph.

<!-- livebook:{"break_markdown":true} -->

"Flow Analytics" as a human-friendly text.

```elixir
Journey.Insights.FlowAnalytics.flow_analytics(graph.name, graph.version) 
|> Journey.Insights.FlowAnalytics.to_text()
|> IO.puts()
```

<!-- livebook:{"output":true} -->

```
Graph: 'g1'
Version: 'v1'
Analyzed at: 2025-09-16T16:37:19.894787Z

EXECUTION STATS:
----------
Total executions: 3
Average duration: 1 second
Median duration: 1 second

NODE STATS (3 nodes):
----------
Node Name: 'sum'
Type: compute
Reached by: 3 executions (100.0%)
Average time to reach: 1 second
Flow ends here: 0 executions (0.0% of all, 0.0% of reached)

Node Name: 'x'
Type: input
Reached by: 3 executions (100.0%)
Average time to reach: 1 second
Flow ends here: 0 executions (0.0% of all, 0.0% of reached)

Node Name: 'y'
Type: input
Reached by: 3 executions (100.0%)
Average time to reach: 0 seconds
Flow ends here: 0 executions (0.0% of all, 0.0% of reached)

```

<!-- livebook:{"output":true} -->

```
:ok
```

"Flow Analytics" as a code-friendly datastructure.

```elixir
# get some analytics for the executions flowing through the system: how many, what does the funnel look like
Journey.Insights.FlowAnalytics.flow_analytics(graph.name, graph.version)
```

<!-- livebook:{"output":true} -->

```
%{
  graph_name: "g1",
  graph_version: "v1",
  node_stats: %{
    nodes: [
      %{
        node_type: :compute,
        node_name: :sum,
        reached_count: 3,
        reached_percentage: 100.0,
        average_time_to_reach: 1,
        flow_ends_here_count: 0,
        flow_ends_here_percentage_of_all: 0.0,
        flow_ends_here_percentage_of_reached: 0.0
      },
      %{
        node_type: :input,
        node_name: :x,
        reached_count: 3,
        reached_percentage: 100.0,
        average_time_to_reach: 1,
        flow_ends_here_count: 0,
        flow_ends_here_percentage_of_all: 0.0,
        flow_ends_here_percentage_of_reached: 0.0
      },
      %{
        node_type: :input,
        node_name: :y,
        reached_count: 3,
        reached_percentage: 100.0,
        average_time_to_reach: 0,
        flow_ends_here_count: 0,
        flow_ends_here_percentage_of_all: 0.0,
        flow_ends_here_percentage_of_reached: 0.0
      }
    ]
  },
  analyzed_at: "2025-09-16T16:37:19.908430Z",
  executions: %{
    count: 3,
    duration_median_seconds_to_last_update: 1,
    duration_avg_seconds_to_last_update: 1
  }
}
```

## In summary

This showed:

* an application defined as a graph + business logic (the function attached to `compute` nodes),
* an execution of the flow take place, step by step,
* an execution of the flow be interrupted and resumed, as if nothing happened,
* analytics describing the "funnel" of executions of your graph,

Behind the scenes (not visible in this simple example):

* computations were subject to a retry policy and retries in case of failures,
* computations scale seamlessly: they run on any replica of your application.

This all happened without application data getting shipped to a third party, or requiring a SAAS dependency.

See [Journey documentation](https://hexdocs.pm/journey) for examples of more complex applications (e.g. a Horoscope app, or a Credit Card Application flow, which includes Mutations, and one-time and recurring Scheduled events).
